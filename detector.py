# from __future__ import print_function
# import zmq as z
import struct
import time,sys
import socket
import pickle
import pandas as pd
import numpy as np
from threading import *
from sklearn.preprocessing import LabelEncoder, OneHotEncoder


# flush stdout and get context from C program
sys.stdout.flush()
sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
server_address = ('127.0.0.1', 5555)
print(sys.stderr, '\nstarting up on %s port %s\n' % server_address)
sock.bind(server_address)

# Connect to socket
print("connected")
model = pickle.load(open("model.pickle.dat", "rb"))


class Client(Thread):
    def __init__(self, socket, address):
        Thread.__init__(self)
        self.sock = socket
        self.addr = address
        self.start()

    def run(self):
        while True:
            # get string from socket
            data = connection.recv(1024).decode()
            print(data)
            incoming_string_ohc = np.array(str(data))
            # get prediction
            pred = model.predict(incoming_string_ohc)
            # connection.sendall(str(pred).encode())
            # print('server sent:', self.sock.recv(1024).decode())
            self.sock.send(str(pred).encode())


sock.listen(1)

while True:
    connection, addr = sock.accept()
    Client(connection, addr)

