# from __future__ import print_function
# import zmq as z
import struct
import time,sys
import socket
import pickle
import pandas as pd
import numpy as np
from threading import *
from sklearn.preprocessing import LabelEncoder, OneHotEncoder


# flush stdout and get context from C program
# sys.stdout.flush()
# sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
# server_address = ('127.0.0.1', 5555)
# print(sys.stderr, '\nstarting up on %s port %s\n' % server_address)
# sock.bind(server_address)

# Connect to socket
print("connected")
model = pickle.load(open("model.pickle.dat", "rb"))
count_vect = pickle.load(open("countvec.pickle.dat", "rb"))
data = ["114 2 1157 6 6 63"]
pred = model.predict(count_vect.transform(data))
print(pred)

# class Client(Thread):
#     def __init__(self, socket, address):
#         Thread.__init__(self)
#         self.sock = socket
#         self.addr = address
#         self.start()
#
#     def run(self):
#         while True:
#             # get string from socket
#             data = connection.recv(1024).decode()
#             print(data)
#             if len(data) > 0:
#                 incoming_string = np.array(data)
#                 count_vect.transform(incoming_string)
#                 # get prediction
#                 pred = model.predict(count_vect.transform(incoming_string))
#                 # connection.sendall(str(pred).encode())
#                 # print('server sent:', self.sock.recv(1024).decode())
#                 self.sock.send(str(pred).encode())
#
#
# sock.listen(1)
#
# while True:
#     connection, addr = sock.accept()
#     Client(connection, addr)

